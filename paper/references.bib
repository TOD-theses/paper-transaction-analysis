
@inproceedings{torres_frontrunner_2021,
	title = {Frontrunner {Jones} and the {Raiders} of the {Dark} {Forest}: {An} {Empirical} {Study} of {Frontrunning} on the {Ethereum} {Blockchain}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Frontrunner {Jones} and the {Raiders} of the {Dark} {Forest}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/torres},
	language = {en},
	urldate = {2023-11-12},
	author = {Torres, Christof Ferreira and Camino, Ramiro and State, Radu},
	year = {2021},
	pages = {1343--1359},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/22CDKIVW/Torres et al. - 2021 - Frontrunner Jones and the Raiders of the Dark Fore.pdf:application/pdf},
}

@inproceedings{wang_impact_2022,
	address = {New York, NY, USA},
	series = {{CHI} '22},
	title = {Impact and {User} {Perception} of {Sandwich} {Attacks} in the {DeFi} {Ecosystem}},
	isbn = {978-1-4503-9157-3},
	url = {https://doi.org/10.1145/3491102.3517585},
	doi = {10.1145/3491102.3517585},
	abstract = {Decentralized finance (DeFi) enables crypto-asset holders to conduct complex financial transactions, while maintaining control over their assets in the blockchain ecosystem. However, the transparency of blockchain networks and the open mechanism of DeFi applications also cause new security issues. In this paper, we focus on sandwich attacks, where attackers take advantage of the transaction confirmation delay and cause financial losses for victims. We evaluate the impact and investigate users’ perceptions of sandwich attacks through a mix-method study. We find that due to users’ lack of technical background and insufficient notifications from the markets, many users were not aware of the existence and the impact of sandwich attacks. They also had a limited understanding of how to resolve the security issue. Interestingly, users showed high tolerance for the impact of sandwich attacks on individuals and the ecosystem, despite potential financial losses. We discuss general implications for users, DeFi applications, and the community.},
	urldate = {2023-11-12},
	booktitle = {Proceedings of the 2022 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Ye and Zuest, Patrick and Yao, Yaxing and Lu, Zhicong and Wattenhofer, Roger},
	month = apr,
	year = {2022},
	keywords = {Blockchain, Finance, Ecosystems, Block-chain, Decentralised, Losses, Financial loss, Security issues, Financial transactions, Technical background, User perceptions},
	pages = {1--15},
	file = {Full text:/home/oaie/snap/zotero-snap/common/Zotero/storage/RPWXQ7B5/Wang et al. - 2022 - Impact and User Perception of Sandwich Attacks in .pdf:application/pdf},
}

@inproceedings{tikhomirov_ethereum_2018,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Ethereum: state of knowledge and research perspectives},
	isbn = {978-3-319-75650-9},
	shorttitle = {Ethereum},
	url = {https://link.springer.com/chapter/10.1007/978-3-319-75650-9_14},
	doi = {10.1007/978-3-319-75650-9_14},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts – Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. A peer-to-peer network of mutually distrusting nodes maintains a common view of the global state and executes code upon request. The stated is stored in a blockchain secured by a proof-of-work consensus mechanism similar to that in Bitcoin. The core value proposition of Ethereum is a full-featured programming language suitable for implementing complex business logic.},
	language = {en},
	booktitle = {Foundations and {Practice} of {Security}: 10th {International} {Symposium} ({FPS} 2017)},
	publisher = {Springer International Publishing},
	author = {Tikhomirov, Sergei},
	editor = {Imine, Abdessamad and Fernandez, José M. and Marion, Jean-Yves and Logrippo, Luigi and Garcia-Alfaro, Joaquin},
	year = {2018},
	keywords = {Ethereum, Blockchain, Smart contracts, State of knowledge, Consensus algorithms, Peer to peer networks, Financial service, Distributed computer systems, Decentralized networks, Identity management, Trusted third parties},
	pages = {206--221},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/CR56NH72/Tikhomirov - 2018 - Ethereum State of Knowledge and Research Perspect.pdf:application/pdf},
}

@article{zhang_combatting_2023,
	title = {Combatting {Front}-{Running} in {Smart} {Contracts}: {Attack} {Mining}, {Benchmark} {Construction} and {Vulnerability} {Detector} {Evaluation}},
	volume = {49},
	shorttitle = {Combatting {Front}-{Running} in {Smart} {Contracts}},
	url = {https://ieeexplore.ieee.org/document/10108045},
	doi = {10.1109/TSE.2023.3270117},
	abstract = {Front-running attacks have been a major concern on the blockchain. Attackers launch front-running attacks by inserting additional transactions before upcoming victim transactions to manipulate victim transaction executions and make profits. Recent studies have shown that front-running attacks are prevalent on the Ethereum blockchain and have caused millions of US dollars loss. It is the vulnerabilities in smart contracts, which are blockchain programs invoked by transactions, that enable the front-running attack opportunities. Although techniques to detect front-running vulnerabilities have been proposed, their performance on real-world vulnerable contracts is unclear. There is no large-scale benchmark based on real attacks to evaluate their capabilities. We make four contributions in this paper. First, we design an effective algorithm to mine real-world attacks in the blockchain history. The evaluation shows that our mining algorithm is more effective and comprehensive, achieving higher recall in finding real attacks than the previous study. Second, we propose an automated and scalable vulnerability localization approach to localize code snippets in smart contracts that enable front-running attacks. The evaluation also shows that our localization approaches are effective in achieving higher precision in pinpointing vulnerabilities compared to the baseline technique. Third, we build a benchmark consisting of 513 real-world attacks with vulnerable code labeled in 235 distinct smart contracts, which is useful to help understand the nature of front-running attacks, vulnerabilities in smart contracts, and evaluate vulnerability detection techniques. Last but not least, we conduct an empirical evaluation of seven state-of-the-art vulnerability detection techniques on our benchmark. The evaluation experiment reveals the inadequacy of existing techniques in detecting front-running vulnerabilities, with a low recall of {\textbackslash}leq≤ 6.04\%. Our further analysis identifies four common limitations in existing techniques: lack of support for inter-contract analysis, inefficient constraint solving for cryptographic operations, improper vulnerability patterns, and lack of token support.},
	urldate = {2024-01-13},
	journal = {IEEE Transactions on Software Engineering},
	author = {Zhang, Wuqi and Wei, Lili and Cheung, Shing-Chi and Liu, Yepang and Li, Shuqing and Liu, Lu and Lyu, Michael R.},
	year = {2023},
	note = {doi: 10.1109/TSE.2023.3270117},
	keywords = {blockchain, Ethereum, Blockchain, ethereum, front-running, smart contract, empirical study, vulnerability, Smart contract, Benchmark, Benchmark testing, dataset, Location awareness, Vulnerability, Block-chain, Empirical studies, Code, Codes (symbols), Front runnings, Dataset, Relay, Statistical tests},
	pages = {3630--3646},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/ZNBNQJZH/10108045.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/BEAJXIAX/Zhang et al. - 2023 - Combatting Front-Running in Smart Contracts Attac.pdf:application/pdf},
}

@inproceedings{perez_smart_2021,
	title = {Smart {Contract} {Vulnerabilities}: {Vulnerable} {Does} {Not} {Imply} {Exploited}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Smart {Contract} {Vulnerabilities}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/perez},
	language = {en},
	urldate = {2024-01-17},
	author = {Perez, Daniel and Livshits, Benjamin},
	year = {2021},
	keywords = {Academic projects},
	pages = {1325--1341},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/72IH67DP/Perez e Livshits - 2021 - Smart Contract Vulnerabilities Vulnerable Does No.pdf:application/pdf},
}

@article{wu_time-travel_2022,
	title = {Time-travel {Investigation}: {Toward} {Building} a {Scalable} {Attack} {Detection} {Framework} on {Ethereum}},
	volume = {31},
	issn = {1049-331X, 1557-7392},
	shorttitle = {Time-travel {Investigation}},
	url = {https://dl.acm.org/doi/10.1145/3505263},
	doi = {10.1145/3505263},
	abstract = {Ethereum has been attracting lots of attacks, hence there is a pressing need to perform timely investigation and detect more attack instances. However, existing systems suffer from the scalability issue due to the following reasons. First, the tight coupling between malicious contract detection and blockchain data importing makes them infeasible to repeatedly detect different attacks. Second, the coarse-grained archive data makes them inefficient to replay transactions. Third, the separation between malicious contract detection and runtime state recovery consumes lots of storage.
            
              In this article, we propose a scalable attack detection framework named
              EthScope
              , which overcomes the scalability issue by neatly re-organizing the Ethereum state and efficiently locating suspicious transactions. It leverages the fine-grained state to support the replay of arbitrary transactions and proposes a well-designed schema to optimize the storage consumption. The performance evaluation shows that
              EthScope
              can solve the scalability issue, i.e., efficiently performing a large-scale analysis on billions of transactions, and a speedup of around
              
                {\textbackslash}( {\textbackslash}text\{2,300\}{\textbackslash}times {\textbackslash})
              
              when replaying transactions. It also has lower storage consumption compared with existing systems. Further analysis shows that
              EthScope
              can help analysts understand attack behaviors and detect more attack instances.},
	language = {en},
	number = {3},
	urldate = {2024-05-10},
	journal = {ACM Transactions on Software Engineering and Methodology},
	author = {Wu, Siwei and Wu, Lei and Zhou, Yajin and Li, Runhuai and Wang, Zhi and Luo, Xiapu and Wang, Cong and Ren, Kui},
	month = jul,
	year = {2022},
	keywords = {Ethereum, vulnerability, Scalability, Vulnerability, Attack detection, Block-chain, attack detection, Detection framework, Different attacks, Digital storage, Existing systems, Pressung, Scalability issue, Tight coupling, Time travel},
	pages = {1--33},
	file = {Wu et al. - 2022 - Time-travel Investigation Toward Building a Scala.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/E4Z3B5CC/Wu et al. - 2022 - Time-travel Investigation Toward Building a Scala.pdf:application/pdf},
}

@inproceedings{ferreira_torres_eye_2021,
	title = {The {Eye} of {Horus}: {Spotting} and {Analyzing} {Attacks} on {Ethereum} {Smart} {Contracts}},
	volume = {12674 LNCS},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85118939173&doi=10.1007%2f978-3-662-64322-8_2&partnerID=40&md5=ab27c2f9e34d763b77307e40fcddeb1f},
	doi = {10.1007/978-3-662-64322-8_2},
	abstract = {In recent years, Ethereum gained tremendously in popularity, growing from a daily transaction average of 10K in January 2016 to an average of 500K in January 2020. Similarly, smart contracts began to carry more value, making them appealing targets for attackers. As a result, they started to become victims of attacks, costing millions of dollars. In response to these attacks, both academia and industry proposed a plethora of tools to scan smart contracts for vulnerabilities before deploying them on the blockchain. However, most of these tools solely focus on detecting vulnerabilities and not attacks, let alone quantifying or tracing the number of stolen assets. In this paper, we present Horus, a framework that empowers the automated detection and investigation of smart contract attacks based on logic-driven and graph-driven analysis of transactions. Horus provides quick means to quantify and trace the flow of stolen assets across the Ethereum blockchain. We perform a large-scale analysis of all the smart contracts deployed on Ethereum until May 2020. We identified 1,888 attacked smart contracts and 8,095 adversarial transactions in the wild. Our investigation shows that the number of attacks did not necessarily decrease over the past few years, but for some vulnerabilities remained constant. Finally, we also demonstrate the practicality of our framework via an in-depth analysis on the recent Uniswap and Lendf.me attacks. © 2021, International Financial Cryptography Association.},
	author = {Ferreira Torres, C. and Iannillo, A.K. and Gervais, A. and State, R.},
	year = {2021},
	keywords = {Ethereum, Blockchain, Smart contracts, Smart contract, Cryptography, Attack detection, slr-source-scopus, Forensics, Block-chain, Chromium compounds, Forensic, Automated detection, Automated investigations, In-depth analysis, Large-scale analysis},
	pages = {33--52},
	file = {Versione inviata:/home/oaie/snap/zotero-snap/common/Zotero/storage/HUSI7JDI/Ferreira Torres et al. - 2021 - The Eye of Horus Spotting and Analyzing Attacks o.pdf:application/pdf},
}

@inproceedings{chen_soda_2020,
	address = {San Diego, CA},
	title = {{SODA}: {A} {Generic} {Online} {Detection} {Framework} for {Smart} {Contracts}},
	isbn = {978-1-891562-61-7},
	shorttitle = {{SODA}},
	url = {https://www.ndss-symposium.org/wp-content/uploads/2020/02/24449.pdf},
	doi = {10.14722/ndss.2020.24449},
	abstract = {Smart contracts have become lucrative and profitable targets for attackers because they can hold a great amount of money. Unfortunately, existing ofﬂine approaches for discovering the vulnerabilities in smart contracts or checking the correctness of smart contracts cannot conduct online detection of attacking transactions. Besides, existing online approaches only focus on speciﬁc attacks and cannot be easily extended to detect other attacks. Moreover, developing a new online detection system for smart contracts from scratch is time-consuming and requires deep understanding of blockchain internals, thus making it difﬁcult to quickly implement and deploy mechanisms to detect new attacks. In this paper, we propose a novel generic online detection framework named SODA for smart contracts on any blockchains that support Ethereum virtual machine (EVM). SODA distinguishes itself from existing online approaches through its capability, efﬁciency, and compatibility. First, SODA empowers users to easily develop apps for detecting various attacks online (i.e., when attacks happen) by separating information collection and attack detection with layered design. At the higher layer, SODA provides uniﬁed interfaces to develop detection apps against various attacks. At the lower layer, SODA instruments EVM to collect all primitive information necessary to detect various attacks and constructs 11 kinds of structural information for the ease of developing apps. Based on SODA, users can develop new apps in a few lines of code without modifying EVM. Second, SODA is efﬁcient, because we design on-demand information retrieval to reduce the overhead of information collection and adopt dynamic linking to eliminate the overhead of inter-process communication. Such design allows users to develop detection apps using any programming languages that can generate dynamic link libraries. Third, since more and more blockchains adopt EVM as smart contract runtime, SODA can be easily migrated to such blockchains without modifying apps. Based on SODA, we develop 8 detection apps to detect the attacks exploiting major vulnerabilities in smart contracts, and integrate SODA (including all apps) into 3 popular blockchains: Ethereum, Expanse and Wanchain. The extensive experimental results demonstrate the effectiveness and efﬁciency of SODA and our detection apps.},
	language = {en},
	urldate = {2024-05-31},
	booktitle = {Proceedings 2020 {Network} and {Distributed} {System} {Security} {Symposium}},
	publisher = {Internet Society},
	author = {Chen, Ting and Cao, Rong and Li, Ting and Luo, Xiapu and Gu, Guofei and Zhang, Yufei and Liao, Zhou and Zhu, Hang and Chen, Gang and He, Zheyuan and Tang, Yuxing and Lin, Xiaodong and Zhang, Xiaosong},
	year = {2020},
	keywords = {Ethereum, Blockchain, Smart contract, Network security, Attack detection, Block-chain, Efficiency, Detection framework, Information attacks, Information collections, Layered design, Off-line approaches, On-line detection, On-line detection system, Various attacks},
	file = {Chen et al. - 2020 - SODA A Generic Online Detection Framework for Sma.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/JVFLPAH6/Chen et al. - 2020 - SODA A Generic Online Detection Framework for Sma.pdf:application/pdf},
}

@inproceedings{zhou_ever-evolving_2020,
	title = {An {Ever}-evolving {Game}: {Evaluation} of {Real}-world {Attacks} and {Defenses} in {Ethereum} {Ecosystem}},
	isbn = {978-1-939133-17-5},
	shorttitle = {An {Ever}-evolving {Game}},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/zhou-shunfan},
	language = {en},
	urldate = {2024-05-31},
	author = {Zhou, Shunfan and Yang, Zhemin and Xiang, Jie and Cao, Yinzhi and Yang, Zhemin and Zhang, Yuan},
	year = {2020},
	pages = {2793--2810},
	file = {Full text:/home/oaie/snap/zotero-snap/common/Zotero/storage/Q4VQE33G/Zhou et al. - 2020 - An Ever-evolving Game Evaluation of Real-world At.pdf:application/pdf},
}

@inproceedings{zhang_txspector_2020,
	title = {\{{TXSPECTOR}\}: {Uncovering} {Attacks} in {Ethereum} from {Transactions}},
	isbn = {978-1-939133-17-5},
	shorttitle = {\{{TXSPECTOR}\}},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/zhang-mengya},
	language = {en},
	urldate = {2024-05-31},
	author = {Zhang, Mengya and Zhang, Xiaokuan and Zhang, Yinqian and Lin, Zhiqiang},
	year = {2020},
	pages = {2775--2792},
	file = {Full text:/home/oaie/snap/zotero-snap/common/Zotero/storage/4DVUGN8Z/Zhang et al. - 2020 - TXSPECTOR Uncovering Attacks in Ethereum from T.pdf:application/pdf},
}

@inproceedings{su_evil_2021,
	title = {Evil {Under} the {Sun}: {Understanding} and {Discovering} {Attacks} on {Ethereum} {Decentralized} {Applications}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Evil {Under} the {Sun}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/su},
	language = {en},
	urldate = {2024-05-31},
	author = {Su, Liya and Shen, Xinyue and Du, Xiangyu and Liao, Xiaojing and Wang, XiaoFeng and Xing, Luyi and Liu, Baoxu},
	year = {2021},
	pages = {1307--1324},
	file = {Full text:/home/oaie/snap/zotero-snap/common/Zotero/storage/IS6BW4MJ/Su et al. - 2021 - Evil Under the Sun Understanding and Discovering .pdf:application/pdf},
}

@inproceedings{chen_tokenscope_2019,
	address = {New York, NY, USA},
	series = {{CCS} '19},
	title = {{TokenScope}: {Automatically} {Detecting} {Inconsistent} {Behaviors} of {Cryptocurrency} {Tokens} in {Ethereum}},
	isbn = {978-1-4503-6747-9},
	shorttitle = {{TokenScope}},
	url = {https://dl.acm.org/doi/10.1145/3319535.3345664},
	doi = {10.1145/3319535.3345664},
	abstract = {Motivated by the success of Bitcoin, lots of cryptocurrencies have been created, the majority of which were implemented as smart contracts running on Ethereum and called tokens. To regulate the interaction between these tokens and users as well as third-party tools (e.g., wallets, exchange markets, etc.), several standards have been proposed for the implementation of token contracts. Although existing tokens involve lots of money, little is known whether or not their behaviors are consistent with the standards. Inconsistent behaviors can lead to user confusion and financial loss, because users/third-party tools interact with token contracts by invoking standard interfaces and listening to standard events. In this work, we take the first step to investigate such inconsistent token behaviors with regard to ERC-20, the most popular token standard. We propose a novel approach to automatically detect such inconsistency by contrasting the behaviors derived from three different sources, including the manipulations of core data structures recording the token holders and their shares, the actions indicated by standard interfaces, and the behaviors suggested by standard events. We implement our approach in a new tool named TokenScope and use it to inspect all transactions sent to the deployed tokens. We detected 3,259,001 transactions that trigger inconsistent behaviors, and these behaviors resulted from 7,472 tokens. By manually examining all (2,353) open-source tokens having inconsistent behaviors, we found that the precision of TokenScope is above 99.9\%. Moreover, we revealed 11 major reasons behind the inconsistency, e.g., flawed tokens, standard methods missing, lack of standard events, etc. In particular, we discovered 50 unreported flawed tokens.},
	urldate = {2024-05-31},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Chen, Ting and Zhang, Yufei and Li, Zihao and Luo, Xiapu and Wang, Ting and Cao, Rong and Xiao, Xiuzhuo and Zhang, Xiaosong},
	month = nov,
	year = {2019},
	keywords = {ethereum, token, ERC-20, inconsistent behavior},
	pages = {1503--1520},
	file = {Chen et al. - 2019 - TokenScope Automatically Detecting Inconsistent B.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/KXUI5H7H/Chen et al. - 2019 - TokenScope Automatically Detecting Inconsistent B.pdf:application/pdf},
}

@article{wood_ethereum_2024,
	title = {{ETHEREUM}: {A} {SECURE} {DECENTRALISED} {GENERALISED} {TRANSACTION} {LEDGER}},
	abstract = {The blockchain paradigm when coupled with cryptographically-secured transactions has demonstrated its utility through a number of projects, with Bitcoin being one of the most notable ones. Each such project can be seen as a simple application on a decentralised, but singleton, compute resource. We can call this paradigm a transactional singleton machine with shared-state.},
	language = {en},
	author = {Wood, Dr Gavin},
	year = {2024},
	note = {https://ethereum.github.io/yellowpaper/paper.pdf. Accesssed 10.7.2024},
	file = {Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/2C6VW7UN/Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:application/pdf},
}

@misc{noauthor_history_2024,
	title = {History and {Forks} of {Ethereum}},
	url = {https://ethereum.org/bg/history/},
	abstract = {A history of the Ethereum blockchain including major milestones, releases, and forks.},
	language = {bg},
	urldate = {2024-07-10},
	journal = {ethereum.org},
	year = {2024},
	note = {https://ethereum.github.io/yellowpaper/paper.pdf. Accesssed 10.7.2024},
}

@misc{noauthor_evm_2024,
	title = {{EVM} {Codes}},
	url = {https://www.evm.codes},
	abstract = {An Ethereum Virtual Machine Opcodes Interactive Reference},
	language = {en},
	urldate = {2024-07-10},
	year = {2024},
	note = {https://www.evm.codes/. Accesssed 10.7.2024},
}
