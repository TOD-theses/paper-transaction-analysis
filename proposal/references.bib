
@article{kushwaha_ethereum_2022,
	title = {Ethereum smart contract analysis tools: {A} systematic review},
	volume = {10},
	issn = {2169-3536},
	shorttitle = {Ethereum {Smart} {Contract} {Analysis} {Tools}},
	url = {https://ieeexplore.ieee.org/abstract/document/9762279},
	doi = {10.1109/ACCESS.2022.3169902},
	abstract = {Blockchain technology and its applications are gaining popularity day by day. It is a ground-breaking technology that allows users to communicate without the need of a trusted middleman. A smart contract (self-executable code) is deployed on the blockchain and auto executes due to a triggering condition. In a no-trust contracting environment, smart contracts can establish trust among parties. Terms and conditions embedded in smart contracts will be imposed immediately when specified criteria have been fulfilled. Due to this, the malicious assailants have a special interest in smart contracts. Blockchains are immutable means if some transaction is deployed or recorded on the blockchain, it becomes unalterable. Thus, smart contracts must be analyzed to ensure zero security vulnerabilities or flaws before deploying the same on the blockchain because a single vulnerability can lead to the loss of millions. For analyzing the security vulnerabilities of smart contracts, various analysis tools have been developed to create safe and secure smart contracts. This paper presents a systematic review on Ethereum smart contracts analysis tools. Initially, these tools are categorized into static and dynamic analysis tools. Thereafter, different sources code analysis techniques are studied such as taint analysis, symbolic execution, and fuzzing techniques. In total, 86 security analysis tools developed for Ethereum blockchain smart contract are analyzed regardless of tool type and analysis approach. Finally, the paper highlights some challenges and future recommendations in the field of Ethereum smart contracts.},
	urldate = {2023-11-24},
	journal = {IEEE Access},
	author = {Kushwaha, Satpal Singh and Joshi, Sandeep and Singh, Dilbag and Kaur, Manjit and Lee, Heung-No},
	year = {2022},
	note = {Conference Name: IEEE Access},
	pages = {57037--57062},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/I6B9JQJC/9762279.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/ES4FTAR2/Kushwaha et al. - 2022 - Ethereum Smart Contract Analysis Tools A Systemat.pdf:application/pdf},
}

@misc{wood_ethereum_2014,
	title = {Ethereum: {A} secure decentralised generalised transaction ledger},
	url = {https://ethereum.github.io/yellowpaper/paper.pdf},
	abstract = {The blockchain paradigm when coupled with cryptographically-secured transactions has demonstrated its utility through a number of projects, with Bitcoin being one of the most notable ones. Each such project can be seen as a simple application on a decentralised, but singleton, compute resource. We can call this paradigm a transactional singleton machine with shared-state.},
	language = {en},
	author = {Wood, Dr Gavin},
	year = {2014},
	note = {https://ethereum.github.io/yellowpaper/paper.pdf. Accesssed 10.1.2024},
	file = {Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/JVKQM4G9/Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:application/pdf},
}

@article{rameder_review_2022,
	title = {Review of {Automated} {Vulnerability} {Analysis} of {Smart} {Contracts} on {Ethereum}},
	volume = {5},
	issn = {2624-7852},
	url = {https://www.frontiersin.org/articles/10.3389/fbloc.2022.814977},
	abstract = {Programs on public blockchains often handle valuable assets, making them attractive targets for attack. At the same time, it is challenging to design correct blockchain applications. Checking code for potential vulnerabilities is a viable option to increase trust. Therefore, numerous methods and tools have been proposed with the intention to support developers and analysts in detecting code vulnerabilities. Moreover, publications keep emerging with different focus, scope, and quality, making it difficult to keep up with the field and to identify relevant trends. Thus, regular reviews are essential to keep pace with the varied developments in a structured manner. Regarding blockchain programs, Ethereum is the platform most widely used and best documented. Moreover, applications based on Ethereum are entrusted with billions of USD. Like on similar blockchains, they are subject to numerous attacks and losses due to vulnerabilities that exist at all levels of the ecosystem. Countermeasures are in great demand. In this work, we perform a systematic literature review (SLR) to assess the state of the art regarding automated vulnerability analysis of smart contracts on Ethereum with a focus on classifications of vulnerabilities, detection methods, security analysis tools, and benchmarks for the assessment of tools. Our initial search of the major on-line libraries yields more than 1,300 publications. For the review, we apply a clear strategy and protocol to assure consequent, comprehensive, and reproducible documentation and results. After collecting the initial results, cleaning up references, removing duplicates and applying the inclusion and exclusion criteria, we retain 303 publications that include 214 primary studies, 70 surveys and 19 SLRs. For quality appraisal, we assess their intrinsic quality (derived from the reputation of the publication venue) as well as their contextual quality (determined by rating predefined criteria). For about 200 publications with at least a medium score, we extract the vulnerabilities, methods, and tools addressed, among other data. In a second step, we synthesize and structure the data into a classification of both the smart contract weaknesses and the analysis methods. Furthermore, we give an overview of tools and benchmarks used to evaluate tools. Finally, we provide a detailed discussion.},
	urldate = {2023-11-30},
	journal = {Frontiers in Blockchain},
	author = {Rameder, Heidelinde and di Angelo, Monika and Salzer, Gernot},
	year = {2022},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/HU9CMKKT/Rameder et al. - 2022 - Review of Automated Vulnerability Analysis of Smar.pdf:application/pdf},
}

@inproceedings{durieux_empirical_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {Empirical review of automated analysis tools on 47,587 {Ethereum} smart contracts},
	isbn = {978-1-4503-7121-6},
	url = {https://dl.acm.org/doi/10.1145/3377811.3380364},
	doi = {10.1145/3377811.3380364},
	abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42\% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27\%). When considering the largest dataset, we observed that 97\% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},
	urldate = {2023-11-30},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Durieux, Thomas and Ferreira, Jo√£o F. and Abreu, Rui and Cruz, Pedro},
	year = {2020},
	keywords = {blockchain, debugging, Ethereum, reproducible bugs, smart contracts, solidity, testing, tools},
	pages = {530--541},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/AE2SCTJW/Durieux et al. - 2020 - Empirical review of automated analysis tools on 47.pdf:application/pdf},
}

@misc{di_angelo_evolution_2023,
	title = {Evolution of automated weakness detection in {Ethereum} bytecode: a comprehensive study},
	shorttitle = {Evolution of {Automated} {Weakness} {Detection} in {Ethereum} {Bytecode}},
	url = {http://arxiv.org/abs/2303.10517},
	doi = {10.48550/arXiv.2303.10517},
	abstract = {Blockchain programs (also known as smart contracts) manage valuable assets like cryptocurrencies and tokens, and implement protocols in domains like decentralized finance (DeFi) and supply-chain management. These types of applications require a high level of security that is hard to achieve due to the transparency of public blockchains. Numerous tools support developers and auditors in the task of detecting weaknesses. As a young technology, blockchains and utilities evolve fast, making it challenging for tools and developers to keep up with the pace. In this work, we study the robustness of code analysis tools and the evolution of weakness detection on a dataset representing six years of blockchain activity. We focus on Ethereum as the crypto ecosystem with the largest number of developers and deployed programs. We investigate the behavior of single tools as well as the agreement of several tools addressing similar weaknesses. Our study is the first that is based on the entire body of deployed bytecode on Ethereum's main chain. We achieve this coverage by considering bytecodes as equivalent if they share the same skeleton. The skeleton of a bytecode is obtained by omitting functionally irrelevant parts. This reduces the 48 million contracts deployed on Ethereum up to January 2022 to 248328 contracts with distinct skeletons. For bulk execution, we utilize the open-source framework SmartBugs that facilitates the analysis of Solidity smart contracts, and enhance it to accept also bytecode as the only input. Moreover, we integrate six further tools for bytecode analysis. The execution of the 12 tools included in our study on the dataset took 30 CPU years. While the tools report a total of 1307486 potential weaknesses, we observe a decrease in reported weaknesses over time, as well as a degradation of tools to varying degrees.},
	urldate = {2023-12-03},
	publisher = {arXiv},
	author = {di Angelo, Monika and Durieux, Thomas and Ferreira, Jo√£o F. and Salzer, Gernot},
	year = {2023},
	note = {arXiv. doi: arXiv:2303.10517},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/KXDYASU5/di Angelo et al. - 2023 - Evolution of Automated Weakness Detection in Ether.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/BS5N7MBD/2303.html:text/html},
}

@inproceedings{tikhomirov_ethereum_2018,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Ethereum: state of knowledge and research perspectives},
	isbn = {978-3-319-75650-9},
	shorttitle = {Ethereum},
	doi = {10.1007/978-3-319-75650-9_14},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts ‚Äì Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. A peer-to-peer network of mutually distrusting nodes maintains a common view of the global state and executes code upon request. The stated is stored in a blockchain secured by a proof-of-work consensus mechanism similar to that in Bitcoin. The core value proposition of Ethereum is a full-featured programming language suitable for implementing complex business logic.},
	language = {en},
	booktitle = {Foundations and {Practice} of {Security}: 10th {International} {Symposium} ({FPS} 2017)},
	publisher = {Springer International Publishing},
	author = {Tikhomirov, Sergei},
	editor = {Imine, Abdessamad and Fernandez, Jos√© M. and Marion, Jean-Yves and Logrippo, Luigi and Garcia-Alfaro, Joaquin},
	year = {2018},
	keywords = {Ethereum, Blockchain, Smart contracts, State of knowledge},
	pages = {206--221},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/CR56NH72/Tikhomirov - 2018 - Ethereum State of Knowledge and Research Perspect.pdf:application/pdf},
}

@inproceedings{ghaleb_how_2020,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection},
	isbn = {978-1-4503-8008-9},
	shorttitle = {How effective are smart contract analysis tools?},
	url = {https://dl.acm.org/doi/10.1145/3395363.3397385},
	doi = {10.1145/3395363.3397385},
	abstract = {Security attacks targeting smart contracts have been on the rise, which have led to financial loss and erosion of trust. Therefore, it is important to enable developers to discover security vulnerabilities in smart contracts before deployment. A number of static analysis tools have been developed for finding security bugs in smart contracts. However, despite the numerous bug-finding tools, there is no systematic approach to evaluate the proposed tools and gauge their effectiveness. This paper proposes SolidiFI, an automated and systematic approach for evaluating smart contracts‚Äô static analysis tools. SolidiFI is based on injecting bugs (i.e., code defects) into all potential locations in a smart contract to introduce targeted security vulnerabilities. SolidiFI then checks the generated buggy contract using the static analysis tools, and identifies the bugs that the tools are unable to detect (false-negatives) along with identifying the bugs reported as false-positives. SolidiFI is used to evaluate six widely-used static analysis tools, namely, Oyente, Securify, Mythril, SmartCheck, Manticore and Slither, using a set of 50 contracts injected by 9369 distinct bugs. It finds several instances of bugs that are not detected by the evaluated tools despite their claims of being able to detect such bugs, and all the tools report many false positives.},
	urldate = {2024-01-09},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Ghaleb, Asem and Pattabiraman, Karthik},
	year = {2020},
	keywords = {Ethereum, smart contracts, bug injection, Ethereum security, fault injection, smart contracts analysis, smart contracts dataset, smart contracts security, solidity code analysis, static analysis tools evaluation},
	pages = {415--427},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/HPM4FNIF/Ghaleb e Pattabiraman - 2020 - How effective are smart contract analysis tools e.pdf:application/pdf},
}

@inproceedings{di_angelo_smartbugs_2023,
	title = {{SmartBugs} 2.0: {An} execution framework for weakness detection in {Ethereum} smart contracts},
	shorttitle = {{SmartBugs} 2.0},
	url = {https://ieeexplore.ieee.org/document/10298326},
	doi = {10.1109/ASE56229.2023.00060},
	abstract = {Smart contracts are blockchain programs that often handle valuable assets. Writing secure smart contracts is far from trivial, and any vulnerability may lead to significant financial losses. To support developers in identifying and eliminating vulnerabilities, methods and tools for the automated analysis of smart contracts have been proposed. However, the lack of commonly accepted benchmark suites and performance metrics makes it difficult to compare and evaluate such tools. Moreover, the tools are heterogeneous in their interfaces and reports as well as their runtime requirements, and installing several tools is time-consuming. In this paper, we present SmartBugs 2.0, a modular execution framework. It provides a uniform interface to 19 tools aimed at smart contract analysis and accepts both Solidity source code and EVM bytecode as input. After describing its architecture, we highlight the features of the framework. We evaluate the framework via its reception by the community and illustrate its scalability by describing its role in a study involving 3.25 million analyses.},
	urldate = {2024-01-10},
	booktitle = {38th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE} 2023)},
	author = {di Angelo, Monika and Durieux, Thomas and Ferreira, Jo√£o F. and Salzer, Gernot},
	month = sep,
	year = {2023},
	note = {doi: 10.1109/ASE56229.2023.00060.},
	pages = {2102--2105},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/QEJAFZSZ/10298326.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/7GG8TAUY/di Angelo et al. - 2023 - SmartBugs 2.0 An Execution Framework for Weakness.pdf:application/pdf},
}

@misc{salehi_not_2022,
	title = {Not so immutable: {Upgradeability} of {Smart} {Contracts} on {Ethereum}},
	shorttitle = {Not so immutable},
	url = {http://arxiv.org/abs/2206.00716},
	doi = {10.48550/arXiv.2206.00716},
	abstract = {A smart contract that is deployed to a blockchain system like Ethereum is, under reasonable circumstances, expected to be immutable and tamper-proof. This is both a feature (promoting integrity and transparency) and a bug (preventing security patches and feature updates). Modern smart contracts use software tricks to enable upgradeability, raising the research questions of how upgradeability is achieved and who is authorized to make changes. In this paper, we summarize and evaluate six upgradeability patterns. We develop a measurement framework for finding how many upgradeable contracts are on Ethereum that use certain prominent upgrade patters. We find 1.4 million proxy contracts which 8,225 of them are unique upgradeable proxy contracts. We also measure how they implement access control over their upgradeability: about 50\% are controlled by a single Externally Owned Address (EOA), and about 14\% are controlled by multi-signature wallets in which a limited number of persons can change the whole logic of the contract.},
	urldate = {2024-01-12},
	publisher = {arXiv},
	author = {Salehi, Mehdi and Clark, Jeremy and Mannan, Mohammad},
	year = {2022},
	note = {arXiv. doi: arXiv:2206.00716},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/Q9VI7XSZ/Salehi et al. - 2022 - Not so immutable Upgradeability of Smart Contract.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/TXNXTULC/2206.html:text/html},
}

@inproceedings{zhang_combatting_2023,
	title = {Combatting {Front}-{Running} in {Smart} {Contracts}: {Attack} {Mining}, {Benchmark} {Construction} and {Vulnerability} {Detector} {Evaluation}},
	volume = {49},
	shorttitle = {Combatting {Front}-{Running} in {Smart} {Contracts}},
	url = {https://ieeexplore.ieee.org/document/10108045},
	doi = {10.1109/TSE.2023.3270117},
	abstract = {Front-running attacks have been a major concern on the blockchain. Attackers launch front-running attacks by inserting additional transactions before upcoming victim transactions to manipulate victim transaction executions and make profits. Recent studies have shown that front-running attacks are prevalent on the Ethereum blockchain and have caused millions of US dollars loss. It is the vulnerabilities in smart contracts, which are blockchain programs invoked by transactions, that enable the front-running attack opportunities. Although techniques to detect front-running vulnerabilities have been proposed, their performance on real-world vulnerable contracts is unclear. There is no large-scale benchmark based on real attacks to evaluate their capabilities. We make four contributions in this paper. First, we design an effective algorithm to mine real-world attacks in the blockchain history. The evaluation shows that our mining algorithm is more effective and comprehensive, achieving higher recall in finding real attacks than the previous study. Second, we propose an automated and scalable vulnerability localization approach to localize code snippets in smart contracts that enable front-running attacks. The evaluation also shows that our localization approaches are effective in achieving higher precision in pinpointing vulnerabilities compared to the baseline technique. Third, we build a benchmark consisting of 513 real-world attacks with vulnerable code labeled in 235 distinct smart contracts, which is useful to help understand the nature of front-running attacks, vulnerabilities in smart contracts, and evaluate vulnerability detection techniques. Last but not least, we conduct an empirical evaluation of seven state-of-the-art vulnerability detection techniques on our benchmark. The evaluation experiment reveals the inadequacy of existing techniques in detecting front-running vulnerabilities, with a low recall of {\textbackslash}leq‚â§ 6.04\%. Our further analysis identifies four common limitations in existing techniques: lack of support for inter-contract analysis, inefficient constraint solving for cryptographic operations, improper vulnerability patterns, and lack of token support.},
	urldate = {2023-11-30},
	booktitle = {{IEEE} {Transactions} on {Software} {Engineering}},
	author = {Zhang, Wuqi and Wei, Lili and Cheung, Shing-Chi and Liu, Yepang and Li, Shuqing and Liu, Lu and Lyu, Michael R.},
	year = {2023},
	note = {doi: 10.1109/TSE.2023.3270117},
	pages = {3630--3646},
}
