
@inproceedings{torres_frontrunner_2021,
	title = {Frontrunner {Jones} and the {Raiders} of the {Dark} {Forest}: {An} {Empirical} {Study} of {Frontrunning} on the {Ethereum} {Blockchain}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Frontrunner {Jones} and the {Raiders} of the {Dark} {Forest}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/torres},
	language = {en},
	urldate = {2023-11-12},
	author = {Torres, Christof Ferreira and Camino, Ramiro and State, Radu},
	year = {2021},
	pages = {1343--1359},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/22CDKIVW/Torres et al. - 2021 - Frontrunner Jones and the Raiders of the Dark Fore.pdf:application/pdf},
}

@inproceedings{heimbach_sok_2022,
	title = {{SoK}: {Preventing} {Transaction} {Reordering} {Manipulations} in {Decentralized} {Finance}},
	shorttitle = {{SoK}},
	url = {http://arxiv.org/abs/2203.11520},
	doi = {10.1145/3558535.3559784},
	abstract = {User transactions on Ethereum's peer-to-peer network are at risk of being attacked. The smart contracts building decentralized finance (DeFi) have introduced a new transaction ordering dependency to the Ethereum blockchain. As a result, attackers can profit from front- and back-running transactions. Multiple approaches to mitigate transaction reordering manipulations have surfaced recently. However, the success of individual approaches in mitigating such attacks and their impact on the entire blockchain remains largely unstudied. In this systematization of knowledge (SoK), we categorize and analyze state-of-the-art transaction reordering manipulation mitigation schemes. Instead of restricting our analysis to a scheme's success at preventing transaction reordering attacks, we evaluate its full impact on the blockchain. Therefore, we are able to provide a complete picture of the strengths and weaknesses of current mitigation schemes. We find that currently no scheme fully meets all the demands of the blockchain ecosystem. In fact, all approaches demonstrate unsatisfactory performance in at least one area relevant to the blockchain ecosystem.},
	urldate = {2023-11-12},
	booktitle = {Proceedings of the 4th {ACM} {Conference} on {Advances} in {Financial} {Technologies}},
	author = {Heimbach, Lioba and Wattenhofer, Roger},
	month = sep,
	year = {2022},
	note = {arXiv:2203.11520 [cs]},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Distributed, Parallel, and Cluster Computing},
	pages = {47--60},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/689E8VAM/Heimbach e Wattenhofer - 2022 - SoK Preventing Transaction Reordering Manipulatio.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/GMHTMF54/2203.html:text/html},
}

@inproceedings{wang_impact_2022,
	address = {New York, NY, USA},
	series = {{CHI} '22},
	title = {Impact and {User} {Perception} of {Sandwich} {Attacks} in the {DeFi} {Ecosystem}},
	isbn = {978-1-4503-9157-3},
	url = {https://doi.org/10.1145/3491102.3517585},
	doi = {10.1145/3491102.3517585},
	abstract = {Decentralized finance (DeFi) enables crypto-asset holders to conduct complex financial transactions, while maintaining control over their assets in the blockchain ecosystem. However, the transparency of blockchain networks and the open mechanism of DeFi applications also cause new security issues. In this paper, we focus on sandwich attacks, where attackers take advantage of the transaction confirmation delay and cause financial losses for victims. We evaluate the impact and investigate users’ perceptions of sandwich attacks through a mix-method study. We find that due to users’ lack of technical background and insufficient notifications from the markets, many users were not aware of the existence and the impact of sandwich attacks. They also had a limited understanding of how to resolve the security issue. Interestingly, users showed high tolerance for the impact of sandwich attacks on individuals and the ecosystem, despite potential financial losses. We discuss general implications for users, DeFi applications, and the community.},
	urldate = {2023-11-12},
	booktitle = {Proceedings of the 2022 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Wang, Ye and Zuest, Patrick and Yao, Yaxing and Lu, Zhicong and Wattenhofer, Roger},
	month = apr,
	year = {2022},
	pages = {1--15},
	file = {Full text:/home/oaie/snap/zotero-snap/common/Zotero/storage/RPWXQ7B5/Wang et al. - 2022 - Impact and User Perception of Sandwich Attacks in .pdf:application/pdf},
}

@misc{capponi_evolution_2022,
	title = {The {Evolution} of {Blockchain}: from {Lit} to {Dark}},
	shorttitle = {The {Evolution} of {Blockchain}},
	url = {http://arxiv.org/abs/2202.05779},
	doi = {10.48550/arXiv.2202.05779},
	abstract = {Transactions submitted through the blockchain peer-to-peer (P2P) network may leak out exploitable information. We study the economic incentives behind the adoption of blockchain dark venues, where users' transactions are observable only by miners on these venues. We show that miners may not fully adopt dark venues to preserve rents extracted from arbitrageurs, hence creating execution risk for users. The dark venue neither eliminates frontrunning risk nor reduces transaction costs. It strictly increases the payoff of miners, weakly increases the payoff of users, and weakly reduces arbitrageurs' profits. We provide empirical support for our main implications, and show that they are economically significant. A 1\% increase in the probability of being frontrun raises users' adoption rate of the dark venue by 0.6\%. Arbitrageurs' cost-to-revenue ratio increases by a third with a dark venue.},
	urldate = {2023-11-12},
	publisher = {arXiv},
	author = {Capponi, Agostino and Jia, Ruizhe and Wang, Ye},
	month = feb,
	year = {2022},
	note = {arXiv:2202.05779 [q-fin]},
	keywords = {Quantitative Finance - General Finance},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/BVGCUIEN/Capponi et al. - 2022 - The Evolution of Blockchain from Lit to Dark.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/6EBTBLKD/2202.html:text/html},
}

@article{kushwaha_ethereum_2022,
	title = {Ethereum smart contract analysis tools: {A} systematic review},
	volume = {10},
	issn = {2169-3536},
	shorttitle = {Ethereum {Smart} {Contract} {Analysis} {Tools}},
	url = {https://ieeexplore.ieee.org/abstract/document/9762279},
	doi = {10.1109/ACCESS.2022.3169902},
	abstract = {Blockchain technology and its applications are gaining popularity day by day. It is a ground-breaking technology that allows users to communicate without the need of a trusted middleman. A smart contract (self-executable code) is deployed on the blockchain and auto executes due to a triggering condition. In a no-trust contracting environment, smart contracts can establish trust among parties. Terms and conditions embedded in smart contracts will be imposed immediately when specified criteria have been fulfilled. Due to this, the malicious assailants have a special interest in smart contracts. Blockchains are immutable means if some transaction is deployed or recorded on the blockchain, it becomes unalterable. Thus, smart contracts must be analyzed to ensure zero security vulnerabilities or flaws before deploying the same on the blockchain because a single vulnerability can lead to the loss of millions. For analyzing the security vulnerabilities of smart contracts, various analysis tools have been developed to create safe and secure smart contracts. This paper presents a systematic review on Ethereum smart contracts analysis tools. Initially, these tools are categorized into static and dynamic analysis tools. Thereafter, different sources code analysis techniques are studied such as taint analysis, symbolic execution, and fuzzing techniques. In total, 86 security analysis tools developed for Ethereum blockchain smart contract are analyzed regardless of tool type and analysis approach. Finally, the paper highlights some challenges and future recommendations in the field of Ethereum smart contracts.},
	urldate = {2023-11-24},
	journal = {IEEE Access},
	author = {Kushwaha, Satpal Singh and Joshi, Sandeep and Singh, Dilbag and Kaur, Manjit and Lee, Heung-No},
	year = {2022},
	note = {Conference Name: IEEE Access},
	pages = {57037--57062},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/I6B9JQJC/9762279.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/ES4FTAR2/Kushwaha et al. - 2022 - Ethereum Smart Contract Analysis Tools A Systemat.pdf:application/pdf},
}

@article{wang_etherfuzz_2022,
	title = {{EtherFuzz}: {Mutation} {Fuzzing} {Smart} {Contracts} for {TOD} {Vulnerability} {Detection}},
	volume = {2022},
	issn = {1530-8669},
	shorttitle = {{EtherFuzz}},
	url = {https://www.hindawi.com/journals/wcmc/2022/1565007/},
	doi = {10.1155/2022/1565007},
	abstract = {With the development of Internet of Things technology, the use of Internet of Things is expanding, and its security risk will become an important factor restricting the development of Internet of Things technology. The application of blockchain technology in the security field of the Internet of Things can improve security problems, and the blockchain has immutable characteristics. Therefore, it is particularly important to ensure the security of blockchain smart contracts. However, the order of transaction in smart contracts is easy to be operated by miners, and there is a relative lack of tools to detect TOD (transaction-ordering dependent) vulnerabilities. The current smart contract vulnerability detection methods have the problems of low efficiency and low accuracy. Therefore, based on the study of TOD vulnerability principle, this paper creatively highlights a mutation fuzzy testing method EtherFuzz to specifically detect TOD vulnerability in smart contracts. Use the intelligent contract ABI (application binary interface) to generate test cases, test the byte code of the intelligent contract, use TOD to test oracle to detect TOD vulnerabilities, and then, mutate the tested data to generate new test cases. Finally, the behavior of smart contract operation is recorded, and the fuzzy test process is controlled until the vulnerability is detected. The experimental results show that when 987 token contracts are selected as Ethereum test objects, the false-positive rate, detection time overhead, and detection storage overhead of EtherFuzz are reduced by 74.4\%, 30.1\%, and 28.1\%, respectively. Therefore, EtherFuzz has high speed, efficiency, and accuracy in detecting TOD vulnerabilities and has excellent application value.},
	language = {en},
	urldate = {2023-11-24},
	journal = {Wireless Communications and Mobile Computing},
	author = {Wang, Xiaoyin and Sun, Jiaze and Hu, Chunyang and Yu, Panpan and Zhang, Bin and Hou, Donghai},
	month = aug,
	year = {2022},
	note = {Publisher: Hindawi},
	pages = {e1565007},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/HR4Z7LMM/Wang et al. - 2022 - EtherFuzz Mutation Fuzzing Smart Contracts for TO.pdf:application/pdf},
}

@book{maffei_automated_2017,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Automated {Auditing} of {Ponzi} {Scheme} {Smart} {Contract} {TOD} {Vulnerabilities}},
	volume = {10204},
	isbn = {978-3-662-54454-9 978-3-662-54455-6},
	shorttitle = {Principles of {Security} and {Trust}},
	url = {https://link.springer.com/10.1007/978-3-662-54455-6},
	abstract = {With the emergence of decentralized finance, smart contracts and their users become more and more susceptible to expensive exploitations. This paper investigates the Ponzi scheme transaction order dependency vulnerabilities in smart contracts. A static analysis based approach is proposed to automatically locate and rectify such Ponzi scheme vulnerabilities, and a prototype tool using Slither, a static analyzer for Solidity, is also developed. All in all, empirical results on a benchmark suite containing 51 Solidity smart contracts show that the proposed methodology can be used successfully to both detect such vulnerabilities and rectify them, or to certify that a Solidity smart contract under question does not contain such vulnerabilities.},
	language = {en},
	urldate = {2023-11-24},
	publisher = {Springer Berlin Heidelberg},
	editor = {Maffei, Matteo and Ryan, Mark},
	year = {2017},
	doi = {10.1007/978-3-662-54455-6},
	file = {Maffei e Ryan - 2017 - Principles of Security and Trust 6th Internationa.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/IU3QQXXV/Maffei e Ryan - 2017 - Principles of Security and Trust 6th Internationa.pdf:application/pdf},
}

@inproceedings{luu_making_2016,
	address = {Vienna Austria},
	title = {Making {Smart} {Contracts} {Smarter}},
	isbn = {978-1-4503-4139-4},
	url = {https://dl.acm.org/doi/10.1145/2976749.2978309},
	doi = {10.1145/2976749.2978309},
	abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-ﬂedged programs that are run on blockchains. Recently, Ethereum’s smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins.},
	language = {en},
	urldate = {2023-11-26},
	booktitle = {Proceedings of the 2016 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {ACM},
	author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
	month = oct,
	year = {2016},
	pages = {254--269},
	file = {Luu et al. - 2016 - Making Smart Contracts Smarter.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/YRM73Z2Q/Luu et al. - 2016 - Making Smart Contracts Smarter.pdf:application/pdf},
}

@misc{wood_ethereum_2023,
	title = {Ethereum: {A} secure decentralised generalised transaction ledger},
	url = {https://ethereum.github.io/yellowpaper/paper.pdf},
	abstract = {The blockchain paradigm when coupled with cryptographically-secured transactions has demonstrated its utility through a number of projects, with Bitcoin being one of the most notable ones. Each such project can be seen as a simple application on a decentralised, but singleton, compute resource. We can call this paradigm a transactional singleton machine with shared-state.},
	language = {en},
	author = {Wood, Dr Gavin},
	year = {2023},
	note = {https://ethereum.github.io/yellowpaper/paper.pdf. Accesssed 10.1.2024},
	file = {Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:/home/oaie/snap/zotero-snap/common/Zotero/storage/JVKQM4G9/Wood - ETHEREUM A SECURE DECENTRALISED GENERALISED TRANS.pdf:application/pdf},
}

@inproceedings{daian_flash_2020,
	title = {Flash {Boys} 2.0: {Frontrunning} in {Decentralized} {Exchanges}, {Miner} {Extractable} {Value}, and {Consensus} {Instability}},
	shorttitle = {Flash {Boys} 2.0},
	url = {https://ieeexplore.ieee.org/abstract/document/9152675},
	doi = {10.1109/SP40000.2020.00040},
	abstract = {Blockchains, and specifically smart contracts, have promised to create fair and transparent trading ecosystems.Unfortunately, we show that this promise has not been met. We document and quantify the widespread and rising deployment of arbitrage bots in blockchain systems, specifically in decentralized exchanges (or "DEXes"). Like high-frequency traders on Wall Street, these bots exploit inefficiencies in DEXes, paying high transaction fees and optimizing network latency to frontrun, i.e., anticipate and exploit, ordinary users' DEX trades.We study the breadth of DEX arbitrage bots in a subset of transactions that yield quantifiable revenue to these bots. We also study bots' profit-making strategies, with a focus on blockchain-specific elements. We observe bots engage in what we call priority gas auctions (PGAs), competitively bidding up transaction fees in order to obtain priority ordering, i.e., early block position and execution, for their transactions. PGAs present an interesting and complex new continuous-time, partial-information, game-theoretic model that we formalize and study. We release an interactive web portal, frontrun.me, to provide the community with real-time data on PGAs. We additionally show that high fees paid for priority transaction ordering poses a systemic risk to consensus-layer security. We explain that such fees are just one form of a general phenomenon in DEXes and beyond-what we call miner extractable value (MEV)-that poses concrete, measurable, consensus-layer security risks. We show empirically that MEV poses a realistic threat to Ethereum today. Our work highlights the large, complex risks created by transaction-ordering dependencies in smart contracts and the ways in which traditional forms of financial-market exploitation are adapting to and penetrating blockchain economies.},
	urldate = {2023-11-30},
	booktitle = {2020 {IEEE} {Symposium} on {Security} and {Privacy} ({SP})},
	author = {Daian, Philip and Goldfeder, Steven and Kell, Tyler and Li, Yunqi and Zhao, Xueyuan and Bentov, Iddo and Breidenbach, Lorenz and Juels, Ari},
	month = may,
	year = {2020},
	note = {ISSN: 2375-1207},
	pages = {910--927},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/EJ5CC9EJ/9152675.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/J3MEQKSW/Daian et al. - 2020 - Flash Boys 2.0 Frontrunning in Decentralized Exch.pdf:application/pdf},
}

@article{zhang_combatting_2023,
	title = {Combatting {Front}-{Running} in {Smart} {Contracts}: {Attack} {Mining}, {Benchmark} {Construction} and {Vulnerability} {Detector} {Evaluation}},
	volume = {49},
	issn = {1939-3520},
	shorttitle = {Combatting {Front}-{Running} in {Smart} {Contracts}},
	url = {https://ieeexplore.ieee.org/document/10108045},
	doi = {10.1109/TSE.2023.3270117},
	abstract = {Front-running attacks have been a major concern on the blockchain. Attackers launch front-running attacks by inserting additional transactions before upcoming victim transactions to manipulate victim transaction executions and make profits. Recent studies have shown that front-running attacks are prevalent on the Ethereum blockchain and have caused millions of US dollars loss. It is the vulnerabilities in smart contracts, which are blockchain programs invoked by transactions, that enable the front-running attack opportunities. Although techniques to detect front-running vulnerabilities have been proposed, their performance on real-world vulnerable contracts is unclear. There is no large-scale benchmark based on real attacks to evaluate their capabilities. We make four contributions in this paper. First, we design an effective algorithm to mine real-world attacks in the blockchain history. The evaluation shows that our mining algorithm is more effective and comprehensive, achieving higher recall in finding real attacks than the previous study. Second, we propose an automated and scalable vulnerability localization approach to localize code snippets in smart contracts that enable front-running attacks. The evaluation also shows that our localization approaches are effective in achieving higher precision in pinpointing vulnerabilities compared to the baseline technique. Third, we build a benchmark consisting of 513 real-world attacks with vulnerable code labeled in 235 distinct smart contracts, which is useful to help understand the nature of front-running attacks, vulnerabilities in smart contracts, and evaluate vulnerability detection techniques. Last but not least, we conduct an empirical evaluation of seven state-of-the-art vulnerability detection techniques on our benchmark. The evaluation experiment reveals the inadequacy of existing techniques in detecting front-running vulnerabilities, with a low recall of {\textbackslash}leq≤ 6.04\%. Our further analysis identifies four common limitations in existing techniques: lack of support for inter-contract analysis, inefficient constraint solving for cryptographic operations, improper vulnerability patterns, and lack of token support.},
	number = {6},
	urldate = {2023-11-30},
	journal = {IEEE Transactions on Software Engineering},
	author = {Zhang, Wuqi and Wei, Lili and Cheung, Shing-Chi and Liu, Yepang and Li, Shuqing and Liu, Lu and Lyu, Michael R.},
	year = {2023},
	pages = {3630--3646},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/INJFMB2B/10108045.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/VJMIEZ4Q/Zhang et al. - 2023 - Combatting Front-Running in Smart Contracts Attac.pdf:application/pdf},
}

@article{rameder_review_2022,
	title = {Review of {Automated} {Vulnerability} {Analysis} of {Smart} {Contracts} on {Ethereum}},
	volume = {5},
	issn = {2624-7852},
	url = {https://www.frontiersin.org/articles/10.3389/fbloc.2022.814977},
	abstract = {Programs on public blockchains often handle valuable assets, making them attractive targets for attack. At the same time, it is challenging to design correct blockchain applications. Checking code for potential vulnerabilities is a viable option to increase trust. Therefore, numerous methods and tools have been proposed with the intention to support developers and analysts in detecting code vulnerabilities. Moreover, publications keep emerging with different focus, scope, and quality, making it difficult to keep up with the field and to identify relevant trends. Thus, regular reviews are essential to keep pace with the varied developments in a structured manner. Regarding blockchain programs, Ethereum is the platform most widely used and best documented. Moreover, applications based on Ethereum are entrusted with billions of USD. Like on similar blockchains, they are subject to numerous attacks and losses due to vulnerabilities that exist at all levels of the ecosystem. Countermeasures are in great demand. In this work, we perform a systematic literature review (SLR) to assess the state of the art regarding automated vulnerability analysis of smart contracts on Ethereum with a focus on classifications of vulnerabilities, detection methods, security analysis tools, and benchmarks for the assessment of tools. Our initial search of the major on-line libraries yields more than 1,300 publications. For the review, we apply a clear strategy and protocol to assure consequent, comprehensive, and reproducible documentation and results. After collecting the initial results, cleaning up references, removing duplicates and applying the inclusion and exclusion criteria, we retain 303 publications that include 214 primary studies, 70 surveys and 19 SLRs. For quality appraisal, we assess their intrinsic quality (derived from the reputation of the publication venue) as well as their contextual quality (determined by rating predefined criteria). For about 200 publications with at least a medium score, we extract the vulnerabilities, methods, and tools addressed, among other data. In a second step, we synthesize and structure the data into a classification of both the smart contract weaknesses and the analysis methods. Furthermore, we give an overview of tools and benchmarks used to evaluate tools. Finally, we provide a detailed discussion.},
	urldate = {2023-11-30},
	journal = {Frontiers in Blockchain},
	author = {Rameder, Heidelinde and di Angelo, Monika and Salzer, Gernot},
	year = {2022},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/HU9CMKKT/Rameder et al. - 2022 - Review of Automated Vulnerability Analysis of Smar.pdf:application/pdf},
}

@inproceedings{durieux_empirical_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {Empirical review of automated analysis tools on 47,587 {Ethereum} smart contracts},
	isbn = {978-1-4503-7121-6},
	url = {https://dl.acm.org/doi/10.1145/3377811.3380364},
	doi = {10.1145/3377811.3380364},
	abstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of SmartBugs, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used SmartBugs to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42\% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27\%). When considering the largest dataset, we observed that 97\% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},
	urldate = {2023-11-30},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Durieux, Thomas and Ferreira, João F. and Abreu, Rui and Cruz, Pedro},
	year = {2020},
	keywords = {blockchain, debugging, Ethereum, reproducible bugs, smart contracts, solidity, testing, tools},
	pages = {530--541},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/AE2SCTJW/Durieux et al. - 2020 - Empirical review of automated analysis tools on 47.pdf:application/pdf},
}

@inproceedings{kolluri_exploiting_2019,
	address = {New York, NY, USA},
	series = {{ISSTA} 2019},
	title = {Exploiting the laws of order in smart contracts},
	isbn = {978-1-4503-6224-5},
	url = {https://dl.acm.org/doi/10.1145/3293882.3330560},
	doi = {10.1145/3293882.3330560},
	abstract = {We investigate a family of bugs in blockchain-based smart contracts, which we dub event-ordering (or EO) bugs. These bugs are intimately related to the dynamic ordering of contract events, i.e. calls of its functions, and enable potential exploits of millions of USD worth of crypto-coins. Previous techniques to detect EO bugs have been restricted to those bugs that involve just one or two event orderings. Our work provides a new formulation of the general class of EO bugs arising in long permutations of such events by using techniques from concurrent program analysis. The technical challenge in detecting EO bugs in blockchain contracts is the inherent combinatorial blowup in path and state space analysis, even for simple contracts. We propose the first use of partial-order reduction techniques, using automatically extracted happens-before relations along with several dynamic symbolic execution optimizations. We build EthRacer, an automatic analysis tool that runs directly on Ethereum bytecode and requires no hints from users. It flags 8\% of over 10, 000 contracts analyzed, providing compact event traces (witnesses) that human analysts can examine in only a few minutes per contract. More than half of the flagged contracts are likely to have unintended behaviour.},
	urldate = {2023-12-02},
	booktitle = {Proceedings of the 28th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Kolluri, Aashish and Nikolic, Ivica and Sergey, Ilya and Hobor, Aquinas and Saxena, Prateek},
	year = {2019},
	keywords = {Ethereum, Concurrency, Happens-Before, Smart Contract Security},
	pages = {363--373},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/P9X8FFHD/Kolluri et al. - 2019 - Exploiting the laws of order in smart contracts.pdf:application/pdf},
}

@misc{di_angelo_evolution_2023,
	title = {Evolution of automated weakness detection in {Ethereum} bytecode: a comprehensive study},
	shorttitle = {Evolution of {Automated} {Weakness} {Detection} in {Ethereum} {Bytecode}},
	url = {http://arxiv.org/abs/2303.10517},
	doi = {10.48550/arXiv.2303.10517},
	abstract = {Blockchain programs (also known as smart contracts) manage valuable assets like cryptocurrencies and tokens, and implement protocols in domains like decentralized finance (DeFi) and supply-chain management. These types of applications require a high level of security that is hard to achieve due to the transparency of public blockchains. Numerous tools support developers and auditors in the task of detecting weaknesses. As a young technology, blockchains and utilities evolve fast, making it challenging for tools and developers to keep up with the pace. In this work, we study the robustness of code analysis tools and the evolution of weakness detection on a dataset representing six years of blockchain activity. We focus on Ethereum as the crypto ecosystem with the largest number of developers and deployed programs. We investigate the behavior of single tools as well as the agreement of several tools addressing similar weaknesses. Our study is the first that is based on the entire body of deployed bytecode on Ethereum's main chain. We achieve this coverage by considering bytecodes as equivalent if they share the same skeleton. The skeleton of a bytecode is obtained by omitting functionally irrelevant parts. This reduces the 48 million contracts deployed on Ethereum up to January 2022 to 248328 contracts with distinct skeletons. For bulk execution, we utilize the open-source framework SmartBugs that facilitates the analysis of Solidity smart contracts, and enhance it to accept also bytecode as the only input. Moreover, we integrate six further tools for bytecode analysis. The execution of the 12 tools included in our study on the dataset took 30 CPU years. While the tools report a total of 1307486 potential weaknesses, we observe a decrease in reported weaknesses over time, as well as a degradation of tools to varying degrees.},
	urldate = {2023-12-03},
	publisher = {arXiv},
	author = {di Angelo, Monika and Durieux, Thomas and Ferreira, João F. and Salzer, Gernot},
	year = {2023},
	note = {doi: arXiv:2303.10517},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/KXDYASU5/di Angelo et al. - 2023 - Evolution of Automated Weakness Detection in Ether.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/BS5N7MBD/2303.html:text/html},
}

@inproceedings{nguyen_sfuzz_2020,
	address = {New York, NY, USA},
	series = {{ICSE} '20},
	title = {{sFuzz}: an efficient adaptive fuzzer for solidity smart contracts},
	isbn = {978-1-4503-7121-6},
	shorttitle = {{sFuzz}},
	url = {https://dl.acm.org/doi/10.1145/3377811.3380334},
	doi = {10.1145/3377811.3380334},
	abstract = {Smart contracts are Turing-complete programs that execute on the infrastructure of the blockchain, which often manage valuable digital assets. Solidity is one of the most popular programming languages for writing smart contracts on the Ethereum platform. Like traditional programs, smart contracts may contain vulnerabilities. Unlike traditional programs, smart contracts cannot be easily patched once they are deployed. It is thus important that smart contracts are tested thoroughly before deployment. In this work, we present an adaptive fuzzer for smart contracts on the Ethereum platform called sFuzz. Compared to existing Solidity fuzzers, sFuzz combines the strategy in the AFL fuzzer and an efficient lightweight multi-objective adaptive strategy targeting those hard-to-cover branches. sFuzz has been applied to more than 4 thousand smart contracts and the experimental results show that (1) sFuzz is efficient, e.g., two orders of magnitude faster than state-of-the-art tools; (2) sFuzz is effective in achieving high code coverage and discovering vulnerabilities; and (3) the different fuzzing strategies in sFuzz complement each other.},
	urldate = {2023-12-03},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},
	year = {2020},
	pages = {778--788},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/GBS5RM4V/Nguyen et al. - 2020 - sFuzz an efficient adaptive fuzzer for solidity s.pdf:application/pdf},
}

@inproceedings{tikhomirov_smartcheck_2018,
	title = {{SmartCheck}: {Static} {Analysis} of {Ethereum} {Smart} {Contracts}},
	shorttitle = {{SmartCheck}},
	url = {https://orbilu.uni.lu/handle/10993/35862},
	doi = {10.1145/3194113.3194115},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts – Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being “The DAO“, broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area. 
 
We provide a comprehensive classification of code issues in Solidity and implement SmartCheck – an extensible static analysis tool that detects them. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers’ toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.},
	language = {English},
	urldate = {2023-12-03},
	author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
	year = {2018},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/5CEJINR2/Tikhomirov et al. - 2018 - SmartCheck Static Analysis of Ethereum Smart Cont.pdf:application/pdf},
}

@inproceedings{tikhomirov_ethereum_2018,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Ethereum: state of knowledge and research perspectives},
	isbn = {978-3-319-75650-9},
	shorttitle = {Ethereum},
	doi = {10.1007/978-3-319-75650-9_14},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts – Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. A peer-to-peer network of mutually distrusting nodes maintains a common view of the global state and executes code upon request. The stated is stored in a blockchain secured by a proof-of-work consensus mechanism similar to that in Bitcoin. The core value proposition of Ethereum is a full-featured programming language suitable for implementing complex business logic.},
	language = {en},
	booktitle = {Foundations and {Practice} of {Security}: 10th {International} {Symposium} ({FPS} 2017)},
	publisher = {Springer International Publishing},
	author = {Tikhomirov, Sergei},
	editor = {Imine, Abdessamad and Fernandez, José M. and Marion, Jean-Yves and Logrippo, Luigi and Garcia-Alfaro, Joaquin},
	year = {2018},
	keywords = {Ethereum, Blockchain, Smart contracts, State of knowledge},
	pages = {206--221},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/CR56NH72/Tikhomirov - 2018 - Ethereum State of Knowledge and Research Perspect.pdf:application/pdf},
}

@article{chen_defining_2022,
	title = {Defining {Smart} {Contract} {Defects} on {Ethereum}},
	volume = {48},
	issn = {1939-3520},
	url = {https://ieeexplore.ieee.org/abstract/document/9072659},
	doi = {10.1109/TSE.2020.2989002},
	abstract = {Smart contracts are programs running on a blockchain. They are immutable to change, and hence can not be patched for bugs once deployed. Thus it is critical to ensure they are bug-free and well-designed before deployment. A Contract defect is an error, flaw or fault in a smart contract that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. The detection of contract defects is a method to avoid potential bugs and improve the design of existing code. Since smart contracts contain numerous distinctive features, such as the gas system. decentralized, it is important to find smart contract specified defects. To fill this gap, we collected smart-contract-related posts from Ethereum StackExchange, as well as real-world smart contracts. We manually analyzed these posts and contracts; using them to define 20 kinds of contract defects. We categorized them into indicating potential security, availability, performance, maintainability and reusability problems. To validate if practitioners consider these contract as harmful, we created an online survey and received 138 responses from 32 different countries. Feedback showed these contract defects are harmful and removing them would improve the quality and robustness of smart contracts. We manually identified our defined contract defects in 587 real world smart contract and publicly released our dataset. Finally, we summarized 5 impacts caused by contract defects. These help developers better understand the symptoms of the defects and removal priority.},
	number = {1},
	urldate = {2024-01-09},
	journal = {IEEE Transactions on Software Engineering},
	author = {Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John and Luo, Xiapu and Chen, Ting},
	year = {2022},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	pages = {327--345},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/PNZ69PMN/9072659.html:text/html;Versione inviata:/home/oaie/snap/zotero-snap/common/Zotero/storage/F29RDEN5/Chen et al. - 2022 - Defining Smart Contract Defects on Ethereum.pdf:application/pdf},
}

@inproceedings{ghaleb_how_2020,
	address = {New York, NY, USA},
	series = {{ISSTA} 2020},
	title = {How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection},
	isbn = {978-1-4503-8008-9},
	shorttitle = {How effective are smart contract analysis tools?},
	url = {https://dl.acm.org/doi/10.1145/3395363.3397385},
	doi = {10.1145/3395363.3397385},
	abstract = {Security attacks targeting smart contracts have been on the rise, which have led to financial loss and erosion of trust. Therefore, it is important to enable developers to discover security vulnerabilities in smart contracts before deployment. A number of static analysis tools have been developed for finding security bugs in smart contracts. However, despite the numerous bug-finding tools, there is no systematic approach to evaluate the proposed tools and gauge their effectiveness. This paper proposes SolidiFI, an automated and systematic approach for evaluating smart contracts’ static analysis tools. SolidiFI is based on injecting bugs (i.e., code defects) into all potential locations in a smart contract to introduce targeted security vulnerabilities. SolidiFI then checks the generated buggy contract using the static analysis tools, and identifies the bugs that the tools are unable to detect (false-negatives) along with identifying the bugs reported as false-positives. SolidiFI is used to evaluate six widely-used static analysis tools, namely, Oyente, Securify, Mythril, SmartCheck, Manticore and Slither, using a set of 50 contracts injected by 9369 distinct bugs. It finds several instances of bugs that are not detected by the evaluated tools despite their claims of being able to detect such bugs, and all the tools report many false positives.},
	urldate = {2024-01-09},
	booktitle = {Proceedings of the 29th {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {Association for Computing Machinery},
	author = {Ghaleb, Asem and Pattabiraman, Karthik},
	year = {2020},
	keywords = {Ethereum, smart contracts, bug injection, Ethereum security, fault injection, smart contracts analysis, smart contracts dataset, smart contracts security, solidity code analysis, static analysis tools evaluation},
	pages = {415--427},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/HPM4FNIF/Ghaleb e Pattabiraman - 2020 - How effective are smart contract analysis tools e.pdf:application/pdf},
}

@inproceedings{tsankov_securify_2018,
	address = {New York, NY, USA},
	series = {{CCS} '18},
	title = {Securify: {Practical} {Security} {Analysis} of {Smart} {Contracts}},
	isbn = {978-1-4503-5693-0},
	shorttitle = {Securify},
	url = {https://dl.acm.org/doi/10.1145/3243734.3243780},
	doi = {10.1145/3243734.3243780},
	abstract = {Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of USD by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed {\textgreater}18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations.},
	urldate = {2024-01-09},
	booktitle = {Proceedings of the 2018 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and Bünzli, Florian and Vechev, Martin},
	month = oct,
	year = {2018},
	keywords = {smart contracts, security analysis, stratified datalog, verification},
	pages = {67--82},
	file = {Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/XKS2NZFV/Tsankov et al. - 2018 - Securify Practical Security Analysis of Smart Con.pdf:application/pdf},
}

@inproceedings{di_angelo_smartbugs_2023,
	title = {{SmartBugs} 2.0: {An} execution framework for weakness detection in {Ethereum} smart contracts},
	shorttitle = {{SmartBugs} 2.0},
	url = {https://ieeexplore.ieee.org/document/10298326},
	doi = {10.1109/ASE56229.2023.00060},
	abstract = {Smart contracts are blockchain programs that often handle valuable assets. Writing secure smart contracts is far from trivial, and any vulnerability may lead to significant financial losses. To support developers in identifying and eliminating vulnerabilities, methods and tools for the automated analysis of smart contracts have been proposed. However, the lack of commonly accepted benchmark suites and performance metrics makes it difficult to compare and evaluate such tools. Moreover, the tools are heterogeneous in their interfaces and reports as well as their runtime requirements, and installing several tools is time-consuming. In this paper, we present SmartBugs 2.0, a modular execution framework. It provides a uniform interface to 19 tools aimed at smart contract analysis and accepts both Solidity source code and EVM bytecode as input. After describing its architecture, we highlight the features of the framework. We evaluate the framework via its reception by the community and illustrate its scalability by describing its role in a study involving 3.25 million analyses.},
	urldate = {2024-01-10},
	booktitle = {38th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE} 2023)},
	author = {di Angelo, Monika and Durieux, Thomas and Ferreira, João F. and Salzer, Gernot},
	month = sep,
	year = {2023},
	note = {ISSN: 2643-1572},
	pages = {2102--2105},
	file = {IEEE Xplore Abstract Record:/home/oaie/snap/zotero-snap/common/Zotero/storage/QEJAFZSZ/10298326.html:text/html;IEEE Xplore Full Text PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/7GG8TAUY/di Angelo et al. - 2023 - SmartBugs 2.0 An Execution Framework for Weakness.pdf:application/pdf},
}

@misc{salehi_not_2022,
	title = {Not so immutable: {Upgradeability} of {Smart} {Contracts} on {Ethereum}},
	shorttitle = {Not so immutable},
	url = {http://arxiv.org/abs/2206.00716},
	doi = {10.48550/arXiv.2206.00716},
	abstract = {A smart contract that is deployed to a blockchain system like Ethereum is, under reasonable circumstances, expected to be immutable and tamper-proof. This is both a feature (promoting integrity and transparency) and a bug (preventing security patches and feature updates). Modern smart contracts use software tricks to enable upgradeability, raising the research questions of how upgradeability is achieved and who is authorized to make changes. In this paper, we summarize and evaluate six upgradeability patterns. We develop a measurement framework for finding how many upgradeable contracts are on Ethereum that use certain prominent upgrade patters. We find 1.4 million proxy contracts which 8,225 of them are unique upgradeable proxy contracts. We also measure how they implement access control over their upgradeability: about 50\% are controlled by a single Externally Owned Address (EOA), and about 14\% are controlled by multi-signature wallets in which a limited number of persons can change the whole logic of the contract.},
	urldate = {2024-01-12},
	publisher = {arXiv},
	author = {Salehi, Mehdi and Clark, Jeremy and Mannan, Mohammad},
	year = {2022},
	note = {doi: arXiv:2206.00716},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:/home/oaie/snap/zotero-snap/common/Zotero/storage/Q9VI7XSZ/Salehi et al. - 2022 - Not so immutable Upgradeability of Smart Contract.pdf:application/pdf;arXiv.org Snapshot:/home/oaie/snap/zotero-snap/common/Zotero/storage/TXNXTULC/2206.html:text/html},
}
